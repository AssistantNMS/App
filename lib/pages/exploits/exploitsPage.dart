import 'package:assistantapps_flutter_common/assistantapps_flutter_common.dart';
import 'package:flutter/material.dart';

import '../../components/scaffoldTemplates/genericPageScaffold.dart';
import '../../components/tilePresenters/exploitTilePresenter.dart';
import '../../constants/AnalyticsEvent.dart';
import '../../helpers/itemsHelper.dart';
import '../../integration/dependencyInjection.dart';

class ExploitsPage extends StatelessWidget {
  ExploitsPage({Key key}) : super(key: key) {
    getAnalytics().trackEvent(AnalyticsEvent.exploitPage);
  }

  Future<List<Widget>> getExploitsWidgetsFuture(BuildContext context) async {
    var exploitsResult = await getExploitRepo().getAll(context);
    if (exploitsResult.hasFailed) {
      return List.empty(growable: true);
    }
    List<Widget> widgets = List.empty(growable: true);
    for (var expl in exploitsResult.value) {
      var explDetails = await exploitDetails(context, expl);
      widgets.add(exploitDetailsTilePresenter(context, explDetails));
    }
    return widgets;
  }

  @override
  Widget build(BuildContext context) {
    return FutureBuilder<List<Widget>>(
      future: getExploitsWidgetsFuture(context),
      builder: (BuildContext context, AsyncSnapshot<List<Widget>> snapshot) {
        return basicGenericPageScaffold(
          context,
          title: getTranslations().fromKey(LocaleKey.exploits),
          body: getBody(context, snapshot),
        );
      },
    );
  }

  Widget getBody(BuildContext context, AsyncSnapshot<List<Widget>> snapshot) {
    Widget errorWidget = asyncSnapshotHandler<List<Widget>>(
      context,
      snapshot,
    );
    if (errorWidget != null) return errorWidget;

    List<Widget> widgets = List.empty(growable: true);

    widgets.add(profCynicalTilePresenter(context));
    widgets.add(customDivider());

    if (snapshot.data.isNotEmpty) {
      widgets.addAll(snapshot.data);
    }

    widgets.add(emptySpace8x());

    return Column(
      children: [
        Expanded(
          child: listWithScrollbar(
            key: const Key('exploitList'),
            shrinkWrap: true,
            itemCount: widgets.length,
            itemBuilder: (context, index) => widgets[index],
          ),
        ),
      ],
    );
  }
}
