import 'package:assistantapps_flutter_common/assistantapps_flutter_common.dart';
import 'package:flutter/material.dart';

import '../../components/scaffoldTemplates/genericPageScaffold.dart';
import '../../components/tilePresenters/requiredItemDetailsTilePresenter.dart';
import '../../constants/AnalyticsEvent.dart';
import '../../contracts/exploitDetailTileItem.dart';
import '../../helpers/genericHelper.dart';

class ExploitDetailsPage extends StatelessWidget {
  final ExploitDetailTileItem details;
  ExploitDetailsPage(this.details) {
    getAnalytics().trackEvent(AnalyticsEvent.exploitDetailsPage);
  }

  @override
  Widget build(BuildContext context) {
    return simpleGenericPageScaffold(
      context,
      title: details.shortDescription,
      body: getBody(context, details),
    );
  }

  Widget getBody(BuildContext context, ExploitDetailTileItem details) {
    List<Widget> widgets = List.empty(growable: true);

    if (details.isPatchedOut) {
      widgets.add(
        genericItemGroup(
            "${getTranslations().fromKey(LocaleKey.patched)}: ${details.patchedOutVersionName}"),
      );
    }
    if (details.inputDetails.length > 0) {
      widgets.add(genericItemText(getTranslations().fromKey(LocaleKey.inputs)));
      widgets.addAll(genericItemWithOverflowButton(
        context,
        details.inputDetails,
        requiredItemDetailsTilePresenter,
      ));
    }
    if (details.steps.length > 0) {
      widgets.add(genericItemText(getTranslations().fromKey(LocaleKey.steps)));
      for (var step in details.steps) {
        widgets.add(
          Card(
            borderOnForeground: false,
            child: ListTile(title: Text(step, style: TextStyle(fontSize: 16))),
            margin: const EdgeInsets.all(0.0),
          ),
        );
      }
    }
    if (details.outputDetails.length > 0) {
      widgets
          .add(genericItemText(getTranslations().fromKey(LocaleKey.outputs)));
      for (var output in details.outputDetails) {
        widgets.add(Card(
          child: requiredItemDetailsTilePresenter(context, output),
          margin: const EdgeInsets.all(0.0),
        ));
      }
    }
    if (details.discoveredBy != null) {
      widgets.add(emptySpace3x());
      widgets.add(genericItemGroup(details.discoveredBy));
    }

    widgets.add(emptySpace8x());

    return Column(
      children: <Widget>[
        Expanded(
          child: listWithScrollbar(
            itemCount: widgets.length,
            itemBuilder: (context, index) => widgets[index],
          ),
        ),
      ],
    );
  }
}
